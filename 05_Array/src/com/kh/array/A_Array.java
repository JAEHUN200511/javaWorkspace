package com.kh.array;

public class A_Array {
// array : collection의 베이스
	
	
/* 변수 : 하나의 공간에 하나의 값을 담을 수 있다.
 * 배열 : 하나의 공간에 여러개의 값을 담을 수 있음
 * 단, 같은 자료형의 값들만 담을 수 있다.
 * 
 * int [] arr = new int[3];
 * 3 = 담을 수 있는 최대 크기 , int형 3개 = 12바이트
 * int 자료형 값을 저장할 수 있는 메모리 영역이 3칸 할당된다.
 * [0,0,0]
 * 배열에 저장된 데이터를 꺼내려면 index [인덱스]를 활용하며 인덱스는 0부터 시작.
 * ex) 1번째 값 꺼낼 때는 0, 3번째 값 꺼낼 때는 2
 * arr[0] , arr[1] , arr [2]
 * 배열의 크기가 5라면 마지막 인덱스 4
 * 배열의 크기가 n이라면 그 배열의 마지막 인덱스 n-1
 *  
 *  
 */
	
	
  // 배열의 변수 먼저 쓰고 [] 대괄호 안에 인덱스 번호 작성
	

     //public void method1() {
    	 
     // 배열 선언
     // 어떤 자료형인지 자료형 작성 
     // 자료형 [] 배열명;
     // 자료형 배열명 [];
     
     int a;
     int[] arr;
     int arr2 [];
     
     //new 들어가면 전부 참조형
     
     /* 배열 할당
      * 이 배열에 몇 개의 값들을 보관할건지 그 배열의 크기를 지정해주는 과정.
      * 할당은 크기를 지정해주는 과정, 지정한 갯수만큼의 인덱스 (저장공간)을 가진 배열이 생성
      * [표현법] 
      * 
      * 배열명 = new 자료형 [배열크기];
      * 
      */
     
      //arr = new int[5];
      // 4 * 5 = 총 20 바이트
    	 
      arr = new int[5];
      
      // 선언과 동시에 할당 가능
      int [] arr3 = new int[5]; // [ , , , , ]
      
      // 배열의 각 인덱스에 값을 대입하고, 추출하는 방법
      
      // 각 인덱스에 어떻게 값을 대입하a는가
      // = 초기화를 하지 않더라도 기본 값이 들어가있다
      // 초기화를 jvm이 대신 진행해줌
      
    		  
      
      arr3[0] = 0;
      arr3[1] = 1;
      arr3[2] = 2;
      arr3[3] = 3;
      arr3[4] = 4;
      
      
      
      System.out.println(arr3[0]); //0
      System.out.println(arr3[1]); //1
      System.out.println(arr3[3]); //0 -> 초기화 시키지 않았음에도 0이 출력된다
      System.out.println(arr3);
      
     }

	}   
    	 




// 배열 저장구조


// 배열은 참조 변수로 stack 영역에 할당되며 배열 공간의 주소를 저장
// 배열 공간의 주소를 이용해 인덱스를 참조하는 방식으로 값 처리
// heap = 공유 메모리
// 객체는 전부 heap 메모리에 저장됨


public void method2() {
	
int num = 10;

	
	
	
	
}
